generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Message {
  id          String         @id @default(uuid()) @db.Uuid
  content     String?
  recordingId String?        @db.Uuid
  recording   File?          @relation(fields: [recordingId], references: [id])
  images      MessageImage[]
  sender User @relation(fields: [senderId], references: [id])
  senderId String @db.Uuid
  conversation Conversation @relation(fields: [conversationId], references: [id] , name: "message-convo")
  conversationId String @db.Uuid 
  createdAt DateTime @db.Timestamp() @default(now())
  updatedAt DateTime @db.Timestamp() @updatedAt 
  isEdited Boolean 
  @@index(fields: [createdAt(sort: Desc)] )
}

model Conversation {
  id String @id @db.Uuid @default(uuid())
  name String? @db.VarChar(255)
  messages Message[] @relation(name: "message-convo")
  users ConversationUser[]
  isPublic Boolean 
  isDui Boolean
  createdAt DateTime @db.Timestamp() @default(now())
  updatedAt DateTime @db.Timestamp() @updatedAt 


}


enum ConversationRole {
  ADMIN
  CHATTER
}


model ConversationUser {
  user User @relation(fields: [userId],references: [id])
  userId String @db.Uuid
  conversation Conversation @relation(fields: [conversationId] , references: [id])
  conversationId String @db.Uuid
  role ConversationRole 
  isBlocked Boolean @default(false)

  @@id([userId,conversationId])
}


enum UserRole {
  BASIC
  ADMIN
}
model User {
  id        String  @id @default(uuid()) @db.Uuid
  username  String  @unique @db.VarChar(255) 
  password  String?  @db.VarChar(255)
  email     String @db.VarChar(255) @unique()
  imageUrl  String?
  imageId   String? @db.Uuid
  role UserRole 
  isEmailVerified Boolean 
  imageFile File?   @relation(fields: [imageId], references: [id])
  messages Message[]
  conversations ConversationUser[]
  blackListed UserBlackList[] @relation(name : "black_lister-user")
  blackListedBy UserBlackList[] @relation(name : "black_listed-user")
  sentFriendRequests FriendRequest[] @relation(name: "friend_request_sender")
  receivedFriendRequests FriendRequest[] @relation(name: "friend_request_receiver")
  friendshipsA FriendShip[] @relation(name : "friend_user_A")
  friendshipsB FriendShip[] @relation(name: "friend_user_B")
  oauthIdentifier String? @db.VarChar(255)
}


model UserBlackList {
  blackLister User @relation(fields: [blackListerId], references: [id], name: "black_lister-user")
  blackListerId String @db.Uuid 
  blackListed User @relation(fields : [blackListedId] , references: [id],  name: "black_listed-user")
  blackListedId String @db.Uuid 

  @@id([blackListedId,blackListerId])
}

model MessageImage {
  messageId String  @db.Uuid
  imageId   String  @db.Uuid
  image     File    @relation(fields: [imageId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])

  @@id([messageId, imageId])
}

model File {
  id                String         @id @default(uuid()) @db.Uuid
  type              FileType
  url               String
  extension         String
  name              String
  recordingMessages Message[]
  messageImages     MessageImage[]
  imageUsers        User[]
  createdAt DateTime @db.Timestamp() @default(now())
}


model FriendRequest  {
  id String @db.Uuid @id @default(uuid())
  sender User @relation(fields: [senderId],references: [id],name: "friend_request_sender")
  senderId String @db.Uuid 
  receiver User @relation(fields: [receiverId],references: [id],name: "friend_request_receiver")
  receiverId String @db.Uuid
  createdAt DateTime @db.Timestamp() @default(now())
}


model FriendShip {
  friendA  User @relation(fields: [friendAId], references: [id] , name: "friend_user_A")
  friendAId String @db.Uuid
  friendB User @relation(fields: [friendBId] ,references: [id], name: "friend_user_B")
  friendBId String @db.Uuid
  createdAt DateTime @db.Timestamp() @default(now())

  @@id([friendAId,friendBId])
}




enum FileType {
  IMAGE
  VIDEO
  AUDIO
}
